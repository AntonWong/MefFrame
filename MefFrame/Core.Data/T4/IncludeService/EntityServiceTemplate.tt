<#+
// <copyright file="EntityConfigurationTemplate.tt" company="HOBOR@中国">
//  Copyright © HOBOR@中国. All Rights Reserved.
// </copyright>

public class EntityServiceTemplate : CSharpTemplate
{
    private T4ModelInfo _model;
        
    public IEntityServiceTemplate(T4ModelInfo model)
    {
        _model = model;
    }
    /// <summary>
    /// 获取 生成的文件名，根据模型名定义
    /// </summary>
    public string FileName
    {
        get
        { 
            return string.Format("{0}Service.cs", _model.Name);
        }
    }

    public override string TransformText()
    {
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
//        如存在本生成代码外的新需求，请在相同命名空间下创建同名分部类实现 <#= _model.Name #>ConfigurationAppend 分部方法。
// </auto-generated>
//
// <copyright file="<#= _model.Name #>Configuration.generated.cs">
//        Copyright(c)2013 HOBOR.All rights reserved.
//        CLR版本：4.0.30319.239
//        开发组织：HOBOR开发团队@中国
//        公司网站：http://www.xieshouwang.com.cn
//        所属工程：XieShouWang.School.Sharon.Core.Data
//        生成时间：<#= DateTime.Now.ToString("yyyy-MM-dd HH:mm") #>
// </copyright>
//------------------------------------------------------------------------------
using Core.Data.Repositories<#= _model.UseModuleDir ? "." + _model.ModuleName : "" #>;
using Core.Models<#= _model.UseModuleDir ? "." + _model.ModuleName : "" #>;
using System;
using System.Collections.Generic;
using System.ComponentModel.Composition;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System;
using System.Data.Entity.ModelConfiguration;
using System.Data.Entity.ModelConfiguration.Configuration;
using Component.Data;
using Core.Models<#= _model.UseModuleDir ? "." + _model.ModuleName : "" #>;

namespace Core.Service.Impl
{
    /// <summary>
    /// ——<#= _model.Description #>
    /// </summary>    
    public partial class <#= _model.Name #>Service : CoreServiceBase, I<#= _model.Name #>Conreact
    {
        
        #region 受保护属性 获取或设置数据访问对象

        [Import]
        protected I<#= _model.Name #>Repository <#= _model.Name #>Repository { get; set; }  
 
        #endregion

        #region 公共属性
        
        public IQueryable<<#= _model.Name #>> <#= _model.Name #>s
        {
            get { return <#= _model.Name #>Repository.Entities; }
        }

        #endregion

        #region 公共方法
        
        public int Insert(<#= _model.Name #> entity)
        {
            return <#= _model.Name #>Repository.Insert(entity);
        }
        public int Delete(Expression<Func<<#= _model.Name #>, bool>> predicate)
        {
            return <#= _model.Name #>Repository.Delete(predicate);
        }
        public int Update(Expression<Func<<#= _model.Name #>, bool>> predicate1, Expression<Func<<#= _model.Name #>, <#= _model.Name #>>> predicate2)
        {
            return <#= _model.Name #>Repository.Update(predicate1, predicate2);
        }

        #endregion
       
    }
}
<#+
        return this.GenerationEnvironment.ToString();
    }
}
#>